#!/bin/sh

# Import function files
. libs/utils.sh
. libs/init.sh
. libs/container.sh
. libs/variables.sh
. libs/delete.sh
. libs/delete-image.sh
. libs/delete-container.sh
. libs/status.sh
. libs/connect.sh
. libs/run.sh
. libs/stop.sh

help() {
  echo "Docker Workflow Manager"
  echo "Usage: $(basename $0) {command} [subcomand] [--help|-h]"
  echo
  echo "Available commands:"
  echo
  echo  "init\t\tCreate a new docker-managed directory o reinitialize an existing one"
  echo  "delete\t\tSet of tools to delete images and containers"
  echo  "run\t\tCreate a container and run it (or only run it if it exists)"
  echo  "status\t\tDisplay the status of the container"
  echo  "connect\t\tConnect to the container"
  echo  
}

check_initialization() {
  if [ ! -f ${configFile} ]; then
    echo "This directory has not been initialized for $(basename $0)".
    echo
    if ask "Do you want to initialize it now?" Y; then
      prepare_init 
    else
      echo "You need to set up $(basename $0) before using it... exiting"
      exit
    fi
  fi
}

check_config() {
  # TODO: Issue #1: Check configuration file before running commands
  return 1
}

# Attempt to start the VM default machine if its not running
start_docker_vm() {

  search_var="docker.dockerMachineCommand"
  get_variable ${configFile} ${search_var}

  dockerMachineCommand=$requested_var

  if [ "$dockerMachineCommand" != "" ]; then
    ${dockerMachineCommand} ls | if ! grep --silent default*Running
    then
      ${dockerMachineCommand} start
    fi
  else
    echo "Could not check if VM is running due to:"
    echo "Variable ${search_var} not found in ${configFile}"
    exit
  fi
}

# Load the docker environment variables
load_docker_env() {
  search_var="docker.dockerMachineCommand"
  get_variable ${configFile} ${search_var}
  if [ "$requested_var" != "" ]; then
    eval $(${requested_var} env default)
  else
    echo "Variable ${search_var} not found in ${configFile}"
    exit
  fi
}

run_checks() {
  check_initialization
  check_config
  start_docker_vm
  load_docker_env
}

case "$1" in 
	init)
		shift
    prepare_init $@
		;;
  delete)
		shift
    run_checks
		prepare_delete $@
		;;
	run)
		shift
    run_checks
		prepare_run $@
		;;
	stop)
		shift
    run_checks
		prepare_stop $@
		;;
	connect)
		shift
    run_checks
		prepare_connect $@
		;;
	status)
		shift
    run_checks
		prepare_status $@
		;;
	*|--help|-h)
		help
		;;
	esac


