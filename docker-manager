#!/bin/sh

PATH=$(brew info `basename $0` |grep Cellar| cut -d ' ' -f1)
LIB="$PATH/lib"

# Import function files
. ${LIB}/variables.sh
. ${LIB}/utils.sh
. ${LIB}/init.sh
. ${LIB}/container.sh
. ${LIB}/run-container.sh
. ${LIB}/connect-container.sh
. ${LIB}/stop-container.sh
. ${LIB}/delete-container.sh
. ${LIB}/status-container.sh
. ${LIB}/generate-image.sh
. ${LIB}/push-image.sh
. ${LIB}/pull-image.sh
. ${LIB}/delete-image.sh
. ${LIB}/delete-container.sh
. ${LIB}/image.sh

help() {
  echo "Docker Workflow Manager"
  echo "Usage: $(basename $0) {command} [subcomand] [--help|-h]"
  echo
  echo "Available commands:"
  echo
  echo  "init\t\tCreate a new docker-managed directory o reinitialize an existing one"
  echo  "image\t\tImage related commands"
  echo  "container\tContainer related commands"
  echo  "run\t\tAlias for container run"
  echo  "stop\t\tAlias for container stop"
  echo  "status\t\tDisplay the status of the container"
  echo  "connect\t\tAlias for container connect"
  echo  
}

check_initialization() {
  if [ ! -f ${configFile} ]; then
    echo "This directory has not been initialized for $(basename $0)".
    echo
    if ask "Do you want to initialize it now?" Y; then
      prepare_init 
    else
      echo "You need to set up $(basename $0) before using it... exiting"
      exit
    fi
  fi
}

check_config() {
  # TODO: Issue #1: Check configuration file before running commands
  return 1
}

# Attempt to start the VM default machine if its not running
start_docker_vm() {

  search_var="docker.dockerMachineCommand"
  get_variable ${configFile} ${search_var}

  dockerMachineCommand=$requested_var

  if [ "$dockerMachineCommand" != "" ]; then
    ${dockerMachineCommand} ls | if ! grep --silent default.*Running
    then
      ${dockerMachineCommand} start
    fi
  else
    echo "Could not check if VM is running due to:"
    echo "Variable ${search_var} not found in ${configFile}"
    exit
  fi
}

# Load the docker environment variables
load_docker_env() {
  search_var="docker.dockerMachineCommand"
  get_variable ${configFile} ${search_var}
  if [ "$requested_var" != "" ]; then
    eval $(${requested_var} env default)
  else
    echo "Variable ${search_var} not found in ${configFile}"
    exit
  fi
}

populate_global_vars() {
  populate_image_name
  populate_container_vars
}

run_checks() {
  check_initialization
  check_config
  start_docker_vm
  load_docker_env
  populate_global_vars
}

case "$1" in 
	init)
		shift
    prepare_init $@
		;;
  image)
    shift
    run_checks
    prepare_image $@
    ;;
  container)
    shift
    run_checks
    prepare_container $@
    ;;
  # Aliases
	run)
		shift
    $0 container run
		;;
	stop)
		shift
    run_checks
    $0 container stop
		;;
	connect)
		shift
    $0 container connect
		;;
	status)
		shift
    $0 container status
		;;
	*|--help|-h)
		help
		;;
	esac


